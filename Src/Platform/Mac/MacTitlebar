#import <Cocoa/Cocoa.h>
#define GLFW_EXPOSE_NATIVE_COCOA
#include <GLFW/glfw3.h>
#include <GLFW/glfw3native.h>

extern "C" NSRect Mac_ContentLayoutRect(GLFWwindow* win) {
    NSWindow* w = glfwGetCocoaWindow(win);
    return w ? w.contentLayoutRect : NSZeroRect;
}

@interface GearToolbarDelegate : NSObject <NSToolbarDelegate>
@end

@implementation GearToolbarDelegate
- (NSArray<NSToolbarItemIdentifier> *)toolbarAllowedItemIdentifiers:(NSToolbar *)tb {
    return @[ @"FileItem", @"ViewItem", NSToolbarFlexibleSpaceItemIdentifier ];
}
- (NSArray<NSToolbarItemIdentifier> *)toolbarDefaultItemIdentifiers:(NSToolbar *)tb {
    return @[ @"FileItem", @"ViewItem", NSToolbarFlexibleSpaceItemIdentifier ];
}
- (NSToolbarItem *)toolbar:(NSToolbar *)tb itemForItemIdentifier:(NSToolbarItemIdentifier)iid willBeInsertedIntoToolbar:(BOOL)f {
    if ([iid isEqualToString:@"FileItem"]) {
        NSPopUpButton* popup = [[NSPopUpButton alloc] initWithFrame:NSMakeRect(0,0,120,28) pullsDown:YES];
        popup.bezelStyle = NSBezelStyleTexturedRounded;
        [popup.menu addItemWithTitle:@"File" action:nil keyEquivalent:@""].enabled = NO;
        [popup.menu addItemWithTitle:@"New" action:@selector(onFileNew:) keyEquivalent:@""].target = self;
        [popup.menu addItemWithTitle:@"Openâ€¦" action:@selector(onFileOpen:) keyEquivalent:@""].target = self;
        [popup.menu addItem:[NSMenuItem separatorItem]];
        [popup.menu addItemWithTitle:@"Quit" action:@selector(onFileQuit:) keyEquivalent:@""].target = self;

        NSToolbarItem* it = [[NSToolbarItem alloc] initWithItemIdentifier:iid];
        it.view = popup;
        return it;
    }
    if ([iid isEqualToString:@"ViewItem"]) {
        NSPopUpButton* popup = [[NSPopUpButton alloc] initWithFrame:NSMakeRect(0,0,120,28) pullsDown:YES];
        popup.bezelStyle = NSBezelStyleTexturedRounded;
        [popup.menu addItemWithTitle:@"View" action:nil keyEquivalent:@""].enabled = NO;
        [popup.menu addItemWithTitle:@"Show ImGui Demo" action:@selector(onViewDemo:) keyEquivalent:@""].target = self;

        NSToolbarItem* it = [[NSToolbarItem alloc] initWithItemIdentifier:iid];
        it.view = popup;
        return it;
    }
    return [[NSToolbarItem alloc] initWithItemIdentifier:iid];
}

// Actions: bridge into your app as needed
- (void)onFileNew:(id)sender { /* TODO: call into your app */ }
- (void)onFileOpen:(id)sender { /* TODO */ }
- (void)onFileQuit:(id)sender { [NSApp terminate:nil]; }
- (void)onViewDemo:(id)sender { /* toggle demo flag via your bridge */ }
@end

extern "C" void Mac_SetupUnifiedTitlebar(GLFWwindow* win) {
    NSWindow* w = glfwGetCocoaWindow(win);
    if (!w) return;

    w.titleVisibility = NSWindowTitleHidden;
    w.titlebarAppearsTransparent = YES;
    w.toolbarStyle = NSWindowToolbarStyleUnified;
    w.movableByWindowBackground = YES;

    NSToolbar* tb = [[NSToolbar alloc] initWithIdentifier:@"MainToolbar"];
    tb.showsBaselineSeparator = NO;
    tb.allowsUserCustomization = NO;
    tb.displayMode = NSToolbarDisplayModeIconAndLabel;

    GearToolbarDelegate* del = [GearToolbarDelegate new];
    tb.delegate = del; // retained by window
    [w setToolbar:tb];

    NSSearchField* search = [[NSSearchField alloc] initWithFrame:NSMakeRect(0,0,240,28)];
    search.placeholderString = @"Search";
    NSTitlebarAccessoryViewController* acc = [NSTitlebarAccessoryViewController new];
    acc.layoutAttribute = NSLayoutAttributeRight;
    acc.view = search;
    [w addTitlebarAccessoryViewController:acc];
}
